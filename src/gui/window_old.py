# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'window.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSlot, QObject, QThread
from . import utils
import time
from PyQt5.QtMultimedia import QCameraInfo


class Ui_MainWindow(QObject):
    def setupUi(self, MainWindow, stream_capture=None):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        MainWindow.setWindowOpacity(1.0)
        MainWindow.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 0, 800, 400))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(4, 4, 375, 375))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("/home/kriaq/Desktop/board 2_screenshot_30.04.2023.png"))
        self.label.setObjectName("label")
        self.horizontalSlider = QtWidgets.QSlider(self.frame)
        self.horizontalSlider.setGeometry(QtCore.QRect(4, 380, 375, 20))
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.horizontalSlider.setValue(100)
        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setGeometry(QtCore.QRect(383, 4, 250, 250))
        self.label_2.setText("")
        self.label_2.setPixmap(QtGui.QPixmap("/home/kriaq/Desktop/board 2_screenshot_30.04.2023.png"))
        self.label_2.setObjectName("label_2")
        self.listView = QtWidgets.QListView(self.frame)
        self.listView.setGeometry(QtCore.QRect(637, 4, 159, 392))
        self.listView.setObjectName("listView")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(180, 460, 400, 24))
        self.comboBox.setObjectName("comboBox")
        self.toolButton = QtWidgets.QToolButton(self.centralwidget)
        self.toolButton.setGeometry(QtCore.QRect(590, 460, 30, 24))
        self.toolButton.setObjectName("toolButton")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuSettings = QtWidgets.QMenu(self.menubar)
        self.menuSettings.setObjectName("menuSettings")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuSettings.menuAction())
        self.setAvailableCameras()
        # self.stream_thread = StreamHandler(stream_capture)
        # self.stream_thread.image_signal.connect(self.update_image)
        self.retranslateUi(MainWindow)
        self.setConnections()
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # self.stream_thread.start()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "go-broadcast"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuSettings.setTitle(_translate("MainWindow", "Settings"))
        self.toolButton.setText(_translate("MainWindow", "add"))

    def setAvailableCameras(self):
        _translate = QtCore.QCoreApplication.translate
        self.cameras = QCameraInfo.availableCameras()
        self.sources = [camera.position() for camera in self.cameras]
        for camera in self.cameras:
            self.comboBox.addItem(_translate("MainWindow", "{} ({})".format(camera.deviceName(), camera.description())))
        self.comboBox.setItemText(len(self.cameras), _translate("MainWindow", "choose file"))
        self.comboBox.activated[int].connect(self.chooseSource)

    def setConnections(self):
        self.toolButton.clicked.connect(self.chooseFile)
        self.horizontalSlider.valueChanged.connect(self.changePercentage)

    def changePercentage(self):
        self.stream_thread.percentage = self.horizontalSlider.value()

    def chooseFile(self):
        file = QtWidgets.QFileDialog.getOpenFileName()[0]
        if not file or file in self.sources:
            return
        self.sources.append(file)
        self.comboBox.addItem(file)

    def chooseSource(self, id):
        self.stream_thread = StreamHandler(self.sources[id])
        self.stream_thread.image_signal.connect(self.update_image)
        self.stream_thread.start()

    @pyqtSlot(np.ndarray)
    def update_image(self, cv_img):
        start = time.time()
        self.stream_thread.blocked = True
        cv_img = utils.padding(cv_img, size=self.label.width())
        pixmap = utils.convert_cv_qt(cv_img)
        print("update")
        self.label.setPixmap(pixmap)
        self.stream_thread.sleep_time = time.time() - start

    def __del__(self):
        self.stream_thread.running = False


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
